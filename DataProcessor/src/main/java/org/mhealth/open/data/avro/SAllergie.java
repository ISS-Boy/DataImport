/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.mhealth.open.data.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SAllergie extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6811226109028073117L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SAllergie\",\"namespace\":\"org.mhealth.open.data.avro\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"user_id\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"start\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"encounter\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"allergies\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SAllergie> ENCODER =
      new BinaryMessageEncoder<SAllergie>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SAllergie> DECODER =
      new BinaryMessageDecoder<SAllergie>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SAllergie> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SAllergie> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SAllergie>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SAllergie to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SAllergie from a ByteBuffer. */
  public static SAllergie fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long timestamp;
  @Deprecated public java.lang.String user_id;
  @Deprecated public java.lang.String start;
  @Deprecated public java.lang.String encounter;
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> allergies;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SAllergie() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param user_id The new value for user_id
   * @param start The new value for start
   * @param encounter The new value for encounter
   * @param allergies The new value for allergies
   */
  public SAllergie(java.lang.Long timestamp, java.lang.String user_id, java.lang.String start, java.lang.String encounter, java.util.Map<java.lang.String,java.lang.String> allergies) {
    this.timestamp = timestamp;
    this.user_id = user_id;
    this.start = start;
    this.encounter = encounter;
    this.allergies = allergies;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return user_id;
    case 2: return start;
    case 3: return encounter;
    case 4: return allergies;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: user_id = (java.lang.String)value$; break;
    case 2: start = (java.lang.String)value$; break;
    case 3: encounter = (java.lang.String)value$; break;
    case 4: allergies = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public java.lang.String getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'start' field.
   * @return The value of the 'start' field.
   */
  public java.lang.String getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * @param value the value to set.
   */
  public void setStart(java.lang.String value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'encounter' field.
   * @return The value of the 'encounter' field.
   */
  public java.lang.String getEncounter() {
    return encounter;
  }

  /**
   * Sets the value of the 'encounter' field.
   * @param value the value to set.
   */
  public void setEncounter(java.lang.String value) {
    this.encounter = value;
  }

  /**
   * Gets the value of the 'allergies' field.
   * @return The value of the 'allergies' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getAllergies() {
    return allergies;
  }

  /**
   * Sets the value of the 'allergies' field.
   * @param value the value to set.
   */
  public void setAllergies(java.util.Map<java.lang.String,java.lang.String> value) {
    this.allergies = value;
  }

  /**
   * Creates a new SAllergie RecordBuilder.
   * @return A new SAllergie RecordBuilder
   */
  public static org.mhealth.open.data.avro.SAllergie.Builder newBuilder() {
    return new org.mhealth.open.data.avro.SAllergie.Builder();
  }

  /**
   * Creates a new SAllergie RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SAllergie RecordBuilder
   */
  public static org.mhealth.open.data.avro.SAllergie.Builder newBuilder(org.mhealth.open.data.avro.SAllergie.Builder other) {
    return new org.mhealth.open.data.avro.SAllergie.Builder(other);
  }

  /**
   * Creates a new SAllergie RecordBuilder by copying an existing SAllergie instance.
   * @param other The existing instance to copy.
   * @return A new SAllergie RecordBuilder
   */
  public static org.mhealth.open.data.avro.SAllergie.Builder newBuilder(org.mhealth.open.data.avro.SAllergie other) {
    return new org.mhealth.open.data.avro.SAllergie.Builder(other);
  }

  /**
   * RecordBuilder for SAllergie instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SAllergie>
    implements org.apache.avro.data.RecordBuilder<SAllergie> {

    private long timestamp;
    private java.lang.String user_id;
    private java.lang.String start;
    private java.lang.String encounter;
    private java.util.Map<java.lang.String,java.lang.String> allergies;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.mhealth.open.data.avro.SAllergie.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user_id)) {
        this.user_id = data().deepCopy(fields()[1].schema(), other.user_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.start)) {
        this.start = data().deepCopy(fields()[2].schema(), other.start);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.encounter)) {
        this.encounter = data().deepCopy(fields()[3].schema(), other.encounter);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.allergies)) {
        this.allergies = data().deepCopy(fields()[4].schema(), other.allergies);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SAllergie instance
     * @param other The existing instance to copy.
     */
    private Builder(org.mhealth.open.data.avro.SAllergie other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user_id)) {
        this.user_id = data().deepCopy(fields()[1].schema(), other.user_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.start)) {
        this.start = data().deepCopy(fields()[2].schema(), other.start);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.encounter)) {
        this.encounter = data().deepCopy(fields()[3].schema(), other.encounter);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.allergies)) {
        this.allergies = data().deepCopy(fields()[4].schema(), other.allergies);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SAllergie.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SAllergie.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return user_id;
    }

    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SAllergie.Builder setUserId(java.lang.String value) {
      validate(fields()[1], value);
      this.user_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SAllergie.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'start' field.
      * @return The value.
      */
    public java.lang.String getStart() {
      return start;
    }

    /**
      * Sets the value of the 'start' field.
      * @param value The value of 'start'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SAllergie.Builder setStart(java.lang.String value) {
      validate(fields()[2], value);
      this.start = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'start' field has been set.
      * @return True if the 'start' field has been set, false otherwise.
      */
    public boolean hasStart() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'start' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SAllergie.Builder clearStart() {
      start = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'encounter' field.
      * @return The value.
      */
    public java.lang.String getEncounter() {
      return encounter;
    }

    /**
      * Sets the value of the 'encounter' field.
      * @param value The value of 'encounter'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SAllergie.Builder setEncounter(java.lang.String value) {
      validate(fields()[3], value);
      this.encounter = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'encounter' field has been set.
      * @return True if the 'encounter' field has been set, false otherwise.
      */
    public boolean hasEncounter() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'encounter' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SAllergie.Builder clearEncounter() {
      encounter = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'allergies' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getAllergies() {
      return allergies;
    }

    /**
      * Sets the value of the 'allergies' field.
      * @param value The value of 'allergies'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SAllergie.Builder setAllergies(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[4], value);
      this.allergies = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'allergies' field has been set.
      * @return True if the 'allergies' field has been set, false otherwise.
      */
    public boolean hasAllergies() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'allergies' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SAllergie.Builder clearAllergies() {
      allergies = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SAllergie build() {
      try {
        SAllergie record = new SAllergie();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.user_id = fieldSetFlags()[1] ? this.user_id : (java.lang.String) defaultValue(fields()[1]);
        record.start = fieldSetFlags()[2] ? this.start : (java.lang.String) defaultValue(fields()[2]);
        record.encounter = fieldSetFlags()[3] ? this.encounter : (java.lang.String) defaultValue(fields()[3]);
        record.allergies = fieldSetFlags()[4] ? this.allergies : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SAllergie>
    WRITER$ = (org.apache.avro.io.DatumWriter<SAllergie>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SAllergie>
    READER$ = (org.apache.avro.io.DatumReader<SAllergie>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
