/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.mhealth.open.data.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SObservation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8950724605645464978L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SObservation\",\"namespace\":\"org.mhealth.open.data.avro\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"user_id\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"encounter\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"signs\",\"type\":{\"type\":\"map\",\"values\":\"float\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SObservation> ENCODER =
      new BinaryMessageEncoder<SObservation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SObservation> DECODER =
      new BinaryMessageDecoder<SObservation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SObservation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SObservation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SObservation>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SObservation to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SObservation from a ByteBuffer. */
  public static SObservation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long timestamp;
  @Deprecated public java.lang.String user_id;
  @Deprecated public java.lang.String date;
  @Deprecated public java.lang.String encounter;
  @Deprecated public java.util.Map<java.lang.String,java.lang.Float> signs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SObservation() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param user_id The new value for user_id
   * @param date The new value for date
   * @param encounter The new value for encounter
   * @param signs The new value for signs
   */
  public SObservation(java.lang.Long timestamp, java.lang.String user_id, java.lang.String date, java.lang.String encounter, java.util.Map<java.lang.String,java.lang.Float> signs) {
    this.timestamp = timestamp;
    this.user_id = user_id;
    this.date = date;
    this.encounter = encounter;
    this.signs = signs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return user_id;
    case 2: return date;
    case 3: return encounter;
    case 4: return signs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: user_id = (java.lang.String)value$; break;
    case 2: date = (java.lang.String)value$; break;
    case 3: encounter = (java.lang.String)value$; break;
    case 4: signs = (java.util.Map<java.lang.String,java.lang.Float>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public java.lang.String getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.String getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.String value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'encounter' field.
   * @return The value of the 'encounter' field.
   */
  public java.lang.String getEncounter() {
    return encounter;
  }

  /**
   * Sets the value of the 'encounter' field.
   * @param value the value to set.
   */
  public void setEncounter(java.lang.String value) {
    this.encounter = value;
  }

  /**
   * Gets the value of the 'signs' field.
   * @return The value of the 'signs' field.
   */
  public java.util.Map<java.lang.String,java.lang.Float> getSigns() {
    return signs;
  }

  /**
   * Sets the value of the 'signs' field.
   * @param value the value to set.
   */
  public void setSigns(java.util.Map<java.lang.String,java.lang.Float> value) {
    this.signs = value;
  }

  /**
   * Creates a new SObservation RecordBuilder.
   * @return A new SObservation RecordBuilder
   */
  public static org.mhealth.open.data.avro.SObservation.Builder newBuilder() {
    return new org.mhealth.open.data.avro.SObservation.Builder();
  }

  /**
   * Creates a new SObservation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SObservation RecordBuilder
   */
  public static org.mhealth.open.data.avro.SObservation.Builder newBuilder(org.mhealth.open.data.avro.SObservation.Builder other) {
    return new org.mhealth.open.data.avro.SObservation.Builder(other);
  }

  /**
   * Creates a new SObservation RecordBuilder by copying an existing SObservation instance.
   * @param other The existing instance to copy.
   * @return A new SObservation RecordBuilder
   */
  public static org.mhealth.open.data.avro.SObservation.Builder newBuilder(org.mhealth.open.data.avro.SObservation other) {
    return new org.mhealth.open.data.avro.SObservation.Builder(other);
  }

  /**
   * RecordBuilder for SObservation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SObservation>
    implements org.apache.avro.data.RecordBuilder<SObservation> {

    private long timestamp;
    private java.lang.String user_id;
    private java.lang.String date;
    private java.lang.String encounter;
    private java.util.Map<java.lang.String,java.lang.Float> signs;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.mhealth.open.data.avro.SObservation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user_id)) {
        this.user_id = data().deepCopy(fields()[1].schema(), other.user_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.encounter)) {
        this.encounter = data().deepCopy(fields()[3].schema(), other.encounter);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.signs)) {
        this.signs = data().deepCopy(fields()[4].schema(), other.signs);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SObservation instance
     * @param other The existing instance to copy.
     */
    private Builder(org.mhealth.open.data.avro.SObservation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user_id)) {
        this.user_id = data().deepCopy(fields()[1].schema(), other.user_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.encounter)) {
        this.encounter = data().deepCopy(fields()[3].schema(), other.encounter);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.signs)) {
        this.signs = data().deepCopy(fields()[4].schema(), other.signs);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SObservation.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SObservation.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return user_id;
    }

    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SObservation.Builder setUserId(java.lang.String value) {
      validate(fields()[1], value);
      this.user_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SObservation.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.String getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SObservation.Builder setDate(java.lang.String value) {
      validate(fields()[2], value);
      this.date = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SObservation.Builder clearDate() {
      date = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'encounter' field.
      * @return The value.
      */
    public java.lang.String getEncounter() {
      return encounter;
    }

    /**
      * Sets the value of the 'encounter' field.
      * @param value The value of 'encounter'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SObservation.Builder setEncounter(java.lang.String value) {
      validate(fields()[3], value);
      this.encounter = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'encounter' field has been set.
      * @return True if the 'encounter' field has been set, false otherwise.
      */
    public boolean hasEncounter() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'encounter' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SObservation.Builder clearEncounter() {
      encounter = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'signs' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.Float> getSigns() {
      return signs;
    }

    /**
      * Sets the value of the 'signs' field.
      * @param value The value of 'signs'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SObservation.Builder setSigns(java.util.Map<java.lang.String,java.lang.Float> value) {
      validate(fields()[4], value);
      this.signs = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'signs' field has been set.
      * @return True if the 'signs' field has been set, false otherwise.
      */
    public boolean hasSigns() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'signs' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SObservation.Builder clearSigns() {
      signs = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SObservation build() {
      try {
        SObservation record = new SObservation();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.user_id = fieldSetFlags()[1] ? this.user_id : (java.lang.String) defaultValue(fields()[1]);
        record.date = fieldSetFlags()[2] ? this.date : (java.lang.String) defaultValue(fields()[2]);
        record.encounter = fieldSetFlags()[3] ? this.encounter : (java.lang.String) defaultValue(fields()[3]);
        record.signs = fieldSetFlags()[4] ? this.signs : (java.util.Map<java.lang.String,java.lang.Float>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SObservation>
    WRITER$ = (org.apache.avro.io.DatumWriter<SObservation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SObservation>
    READER$ = (org.apache.avro.io.DatumReader<SObservation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
