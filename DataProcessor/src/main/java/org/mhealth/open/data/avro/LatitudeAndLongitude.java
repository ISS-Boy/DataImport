/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.mhealth.open.data.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LatitudeAndLongitude extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6946929751816094119L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LatitudeAndLongitude\",\"namespace\":\"org.mhealth.open.data.avro\",\"fields\":[{\"name\":\"user_id\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LatitudeAndLongitude> ENCODER =
      new BinaryMessageEncoder<LatitudeAndLongitude>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LatitudeAndLongitude> DECODER =
      new BinaryMessageDecoder<LatitudeAndLongitude>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LatitudeAndLongitude> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LatitudeAndLongitude> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LatitudeAndLongitude>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LatitudeAndLongitude to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LatitudeAndLongitude from a ByteBuffer. */
  public static LatitudeAndLongitude fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public String user_id;
  @Deprecated public double latitude;
  @Deprecated public double longitude;
  @Deprecated public long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LatitudeAndLongitude() {}

  /**
   * All-args constructor.
   * @param user_id The new value for user_id
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   * @param timestamp The new value for timestamp
   */
  public LatitudeAndLongitude(String user_id, Double latitude, Double longitude, Long timestamp) {
    this.user_id = user_id;
    this.latitude = latitude;
    this.longitude = longitude;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return user_id;
    case 1: return latitude;
    case 2: return longitude;
    case 3: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: user_id = (String)value$; break;
    case 1: latitude = (Double)value$; break;
    case 2: longitude = (Double)value$; break;
    case 3: timestamp = (Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public String getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(String value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(Long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new LatitudeAndLongitude RecordBuilder.
   * @return A new LatitudeAndLongitude RecordBuilder
   */
  public static org.mhealth.open.data.avro.LatitudeAndLongitude.Builder newBuilder() {
    return new org.mhealth.open.data.avro.LatitudeAndLongitude.Builder();
  }

  /**
   * Creates a new LatitudeAndLongitude RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LatitudeAndLongitude RecordBuilder
   */
  public static org.mhealth.open.data.avro.LatitudeAndLongitude.Builder newBuilder(org.mhealth.open.data.avro.LatitudeAndLongitude.Builder other) {
    return new org.mhealth.open.data.avro.LatitudeAndLongitude.Builder(other);
  }

  /**
   * Creates a new LatitudeAndLongitude RecordBuilder by copying an existing LatitudeAndLongitude instance.
   * @param other The existing instance to copy.
   * @return A new LatitudeAndLongitude RecordBuilder
   */
  public static org.mhealth.open.data.avro.LatitudeAndLongitude.Builder newBuilder(org.mhealth.open.data.avro.LatitudeAndLongitude other) {
    return new org.mhealth.open.data.avro.LatitudeAndLongitude.Builder(other);
  }

  public void nextRandomValue() {
    this.latitude += (Math.random()* 1.2 - 0.6);
    this.longitude += (Math.random() * 1.2 - 0.6);
  }

  /**
   * RecordBuilder for LatitudeAndLongitude instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LatitudeAndLongitude>
    implements org.apache.avro.data.RecordBuilder<LatitudeAndLongitude> {

    private String user_id;
    private double latitude;
    private double longitude;
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.mhealth.open.data.avro.LatitudeAndLongitude.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.latitude)) {
        this.latitude = data().deepCopy(fields()[1].schema(), other.latitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.longitude)) {
        this.longitude = data().deepCopy(fields()[2].schema(), other.longitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LatitudeAndLongitude instance
     * @param other The existing instance to copy.
     */
    private Builder(org.mhealth.open.data.avro.LatitudeAndLongitude other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.latitude)) {
        this.latitude = data().deepCopy(fields()[1].schema(), other.latitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.longitude)) {
        this.longitude = data().deepCopy(fields()[2].schema(), other.longitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public String getUserId() {
      return user_id;
    }

    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.LatitudeAndLongitude.Builder setUserId(String value) {
      validate(fields()[0], value);
      this.user_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.LatitudeAndLongitude.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public Double getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.LatitudeAndLongitude.Builder setLatitude(double value) {
      validate(fields()[1], value);
      this.latitude = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.LatitudeAndLongitude.Builder clearLatitude() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public Double getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.LatitudeAndLongitude.Builder setLongitude(double value) {
      validate(fields()[2], value);
      this.longitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.LatitudeAndLongitude.Builder clearLongitude() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.LatitudeAndLongitude.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.LatitudeAndLongitude.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LatitudeAndLongitude build() {
      try {
        LatitudeAndLongitude record = new LatitudeAndLongitude();
        record.user_id = fieldSetFlags()[0] ? this.user_id : (String) defaultValue(fields()[0]);
        record.latitude = fieldSetFlags()[1] ? this.latitude : (Double) defaultValue(fields()[1]);
        record.longitude = fieldSetFlags()[2] ? this.longitude : (Double) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LatitudeAndLongitude>
    WRITER$ = (org.apache.avro.io.DatumWriter<LatitudeAndLongitude>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LatitudeAndLongitude>
    READER$ = (org.apache.avro.io.DatumReader<LatitudeAndLongitude>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
