/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.mhealth.open.data.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SLine extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7138892867434159223L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SLine\",\"namespace\":\"org.mhealth.open.data.avro\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"user_id\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"date\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"code\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"rcode\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"start\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"stop\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"encounter\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"description\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"reasondescription\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SLine> ENCODER =
      new BinaryMessageEncoder<SLine>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SLine> DECODER =
      new BinaryMessageDecoder<SLine>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SLine> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SLine> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SLine>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SLine to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SLine from a ByteBuffer. */
  public static SLine fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long timestamp;
  @Deprecated public java.lang.String user_id;
  @Deprecated public java.lang.String date;
  @Deprecated public java.lang.String code;
  @Deprecated public java.lang.String rcode;
  @Deprecated public java.lang.String start;
  @Deprecated public java.lang.String stop;
  @Deprecated public java.lang.String encounter;
  @Deprecated public java.lang.String description;
  @Deprecated public java.lang.String reasondescription;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SLine() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param user_id The new value for user_id
   * @param date The new value for date
   * @param code The new value for code
   * @param rcode The new value for rcode
   * @param start The new value for start
   * @param stop The new value for stop
   * @param encounter The new value for encounter
   * @param description The new value for description
   * @param reasondescription The new value for reasondescription
   */
  public SLine(java.lang.Long timestamp, java.lang.String user_id, java.lang.String date, java.lang.String code, java.lang.String rcode, java.lang.String start, java.lang.String stop, java.lang.String encounter, java.lang.String description, java.lang.String reasondescription) {
    this.timestamp = timestamp;
    this.user_id = user_id;
    this.date = date;
    this.code = code;
    this.rcode = rcode;
    this.start = start;
    this.stop = stop;
    this.encounter = encounter;
    this.description = description;
    this.reasondescription = reasondescription;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return user_id;
    case 2: return date;
    case 3: return code;
    case 4: return rcode;
    case 5: return start;
    case 6: return stop;
    case 7: return encounter;
    case 8: return description;
    case 9: return reasondescription;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: user_id = (java.lang.String)value$; break;
    case 2: date = (java.lang.String)value$; break;
    case 3: code = (java.lang.String)value$; break;
    case 4: rcode = (java.lang.String)value$; break;
    case 5: start = (java.lang.String)value$; break;
    case 6: stop = (java.lang.String)value$; break;
    case 7: encounter = (java.lang.String)value$; break;
    case 8: description = (java.lang.String)value$; break;
    case 9: reasondescription = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public java.lang.String getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.String getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.String value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.String getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.String value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'rcode' field.
   * @return The value of the 'rcode' field.
   */
  public java.lang.String getRcode() {
    return rcode;
  }

  /**
   * Sets the value of the 'rcode' field.
   * @param value the value to set.
   */
  public void setRcode(java.lang.String value) {
    this.rcode = value;
  }

  /**
   * Gets the value of the 'start' field.
   * @return The value of the 'start' field.
   */
  public java.lang.String getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * @param value the value to set.
   */
  public void setStart(java.lang.String value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'stop' field.
   * @return The value of the 'stop' field.
   */
  public java.lang.String getStop() {
    return stop;
  }

  /**
   * Sets the value of the 'stop' field.
   * @param value the value to set.
   */
  public void setStop(java.lang.String value) {
    this.stop = value;
  }

  /**
   * Gets the value of the 'encounter' field.
   * @return The value of the 'encounter' field.
   */
  public java.lang.String getEncounter() {
    return encounter;
  }

  /**
   * Sets the value of the 'encounter' field.
   * @param value the value to set.
   */
  public void setEncounter(java.lang.String value) {
    this.encounter = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'reasondescription' field.
   * @return The value of the 'reasondescription' field.
   */
  public java.lang.String getReasondescription() {
    return reasondescription;
  }

  /**
   * Sets the value of the 'reasondescription' field.
   * @param value the value to set.
   */
  public void setReasondescription(java.lang.String value) {
    this.reasondescription = value;
  }

  /**
   * Creates a new SLine RecordBuilder.
   * @return A new SLine RecordBuilder
   */
  public static org.mhealth.open.data.avro.SLine.Builder newBuilder() {
    return new org.mhealth.open.data.avro.SLine.Builder();
  }

  /**
   * Creates a new SLine RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SLine RecordBuilder
   */
  public static org.mhealth.open.data.avro.SLine.Builder newBuilder(org.mhealth.open.data.avro.SLine.Builder other) {
    return new org.mhealth.open.data.avro.SLine.Builder(other);
  }

  /**
   * Creates a new SLine RecordBuilder by copying an existing SLine instance.
   * @param other The existing instance to copy.
   * @return A new SLine RecordBuilder
   */
  public static org.mhealth.open.data.avro.SLine.Builder newBuilder(org.mhealth.open.data.avro.SLine other) {
    return new org.mhealth.open.data.avro.SLine.Builder(other);
  }

  /**
   * RecordBuilder for SLine instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SLine>
    implements org.apache.avro.data.RecordBuilder<SLine> {

    private long timestamp;
    private java.lang.String user_id;
    private java.lang.String date;
    private java.lang.String code;
    private java.lang.String rcode;
    private java.lang.String start;
    private java.lang.String stop;
    private java.lang.String encounter;
    private java.lang.String description;
    private java.lang.String reasondescription;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.mhealth.open.data.avro.SLine.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user_id)) {
        this.user_id = data().deepCopy(fields()[1].schema(), other.user_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.code)) {
        this.code = data().deepCopy(fields()[3].schema(), other.code);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.rcode)) {
        this.rcode = data().deepCopy(fields()[4].schema(), other.rcode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.start)) {
        this.start = data().deepCopy(fields()[5].schema(), other.start);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.stop)) {
        this.stop = data().deepCopy(fields()[6].schema(), other.stop);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.encounter)) {
        this.encounter = data().deepCopy(fields()[7].schema(), other.encounter);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.description)) {
        this.description = data().deepCopy(fields()[8].schema(), other.description);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.reasondescription)) {
        this.reasondescription = data().deepCopy(fields()[9].schema(), other.reasondescription);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SLine instance
     * @param other The existing instance to copy.
     */
    private Builder(org.mhealth.open.data.avro.SLine other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user_id)) {
        this.user_id = data().deepCopy(fields()[1].schema(), other.user_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.code)) {
        this.code = data().deepCopy(fields()[3].schema(), other.code);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.rcode)) {
        this.rcode = data().deepCopy(fields()[4].schema(), other.rcode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.start)) {
        this.start = data().deepCopy(fields()[5].schema(), other.start);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.stop)) {
        this.stop = data().deepCopy(fields()[6].schema(), other.stop);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.encounter)) {
        this.encounter = data().deepCopy(fields()[7].schema(), other.encounter);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.description)) {
        this.description = data().deepCopy(fields()[8].schema(), other.description);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.reasondescription)) {
        this.reasondescription = data().deepCopy(fields()[9].schema(), other.reasondescription);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return user_id;
    }

    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder setUserId(java.lang.String value) {
      validate(fields()[1], value);
      this.user_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.String getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder setDate(java.lang.String value) {
      validate(fields()[2], value);
      this.date = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder clearDate() {
      date = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.String getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder setCode(java.lang.String value) {
      validate(fields()[3], value);
      this.code = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder clearCode() {
      code = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'rcode' field.
      * @return The value.
      */
    public java.lang.String getRcode() {
      return rcode;
    }

    /**
      * Sets the value of the 'rcode' field.
      * @param value The value of 'rcode'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder setRcode(java.lang.String value) {
      validate(fields()[4], value);
      this.rcode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'rcode' field has been set.
      * @return True if the 'rcode' field has been set, false otherwise.
      */
    public boolean hasRcode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'rcode' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder clearRcode() {
      rcode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'start' field.
      * @return The value.
      */
    public java.lang.String getStart() {
      return start;
    }

    /**
      * Sets the value of the 'start' field.
      * @param value The value of 'start'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder setStart(java.lang.String value) {
      validate(fields()[5], value);
      this.start = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'start' field has been set.
      * @return True if the 'start' field has been set, false otherwise.
      */
    public boolean hasStart() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'start' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder clearStart() {
      start = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'stop' field.
      * @return The value.
      */
    public java.lang.String getStop() {
      return stop;
    }

    /**
      * Sets the value of the 'stop' field.
      * @param value The value of 'stop'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder setStop(java.lang.String value) {
      validate(fields()[6], value);
      this.stop = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'stop' field has been set.
      * @return True if the 'stop' field has been set, false otherwise.
      */
    public boolean hasStop() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'stop' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder clearStop() {
      stop = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'encounter' field.
      * @return The value.
      */
    public java.lang.String getEncounter() {
      return encounter;
    }

    /**
      * Sets the value of the 'encounter' field.
      * @param value The value of 'encounter'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder setEncounter(java.lang.String value) {
      validate(fields()[7], value);
      this.encounter = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'encounter' field has been set.
      * @return True if the 'encounter' field has been set, false otherwise.
      */
    public boolean hasEncounter() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'encounter' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder clearEncounter() {
      encounter = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder setDescription(java.lang.String value) {
      validate(fields()[8], value);
      this.description = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder clearDescription() {
      description = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'reasondescription' field.
      * @return The value.
      */
    public java.lang.String getReasondescription() {
      return reasondescription;
    }

    /**
      * Sets the value of the 'reasondescription' field.
      * @param value The value of 'reasondescription'.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder setReasondescription(java.lang.String value) {
      validate(fields()[9], value);
      this.reasondescription = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'reasondescription' field has been set.
      * @return True if the 'reasondescription' field has been set, false otherwise.
      */
    public boolean hasReasondescription() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'reasondescription' field.
      * @return This builder.
      */
    public org.mhealth.open.data.avro.SLine.Builder clearReasondescription() {
      reasondescription = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SLine build() {
      try {
        SLine record = new SLine();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.user_id = fieldSetFlags()[1] ? this.user_id : (java.lang.String) defaultValue(fields()[1]);
        record.date = fieldSetFlags()[2] ? this.date : (java.lang.String) defaultValue(fields()[2]);
        record.code = fieldSetFlags()[3] ? this.code : (java.lang.String) defaultValue(fields()[3]);
        record.rcode = fieldSetFlags()[4] ? this.rcode : (java.lang.String) defaultValue(fields()[4]);
        record.start = fieldSetFlags()[5] ? this.start : (java.lang.String) defaultValue(fields()[5]);
        record.stop = fieldSetFlags()[6] ? this.stop : (java.lang.String) defaultValue(fields()[6]);
        record.encounter = fieldSetFlags()[7] ? this.encounter : (java.lang.String) defaultValue(fields()[7]);
        record.description = fieldSetFlags()[8] ? this.description : (java.lang.String) defaultValue(fields()[8]);
        record.reasondescription = fieldSetFlags()[9] ? this.reasondescription : (java.lang.String) defaultValue(fields()[9]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SLine>
    WRITER$ = (org.apache.avro.io.DatumWriter<SLine>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SLine>
    READER$ = (org.apache.avro.io.DatumReader<SLine>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
